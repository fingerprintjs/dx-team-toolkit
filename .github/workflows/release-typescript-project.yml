name: 'Release TypeScript project'
on:
  workflow_call:
    inputs:
      nodeVersion:
        description: 'Node version to use'
        required: false
        type: string
        default: 'lts/*'
      runAfterInstall:
        type: string
        required: false
        description: 'Commands to run after installing dependencies'
      distFolderNeedForRelease:
        type: boolean
        required: false
        description: 'Flag that we need `dist` folder to start release process'
      appId:
        type: string
        required: false
        description: 'GitHub app id for release process'
      runsOn:
        type: string
        required: false
        default: ubuntu-latest
        description: GitHub action runner.
      checkTypes:
        type: boolean
        required: false
        default: true
        description: 'Whether to run type checking when building the project.'
      releaseWorkingDirectory:
        type: string
        required: false
        description: 'Working directory for release process'
    secrets:
      GH_RELEASE_TOKEN:
        description: 'GitHub token with permissions to create releases and perform other necessary operations'
        required: false
      APP_PRIVATE_KEY:
        description: 'GitHub App token to request GitHub token'
        required: false
      NPM_AUTH_TOKEN:
        description: 'NPM authentication token for publishing packages'
        required: false

jobs:
  build-and-check:
    name: 'Build project and run CI checks'
    uses: ./.github/workflows/build-typescript-project.yml
    with:
      runAfterInstall: ${{ inputs.runAfterInstall }}
      nodeVersion: ${{ inputs.nodeVersion }}
      artifactName: ${{ inputs.distFolderNeedForRelease && 'dist-folder' || '' }}
      artifactPath: ./dist
      runsOn: ${{ inputs.runsOn }}
      checkTypes: ${{ inputs.checkTypes }}

  release:
    name: 'Release'
    needs: build-and-check
    runs-on: ${{ inputs.runsOn }}
    environment: production
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: 'Determine package manager'
        run: |
          if [[ -f "pnpm-lock.yaml" ]]; then
            echo "Using pnpm"
            echo "PACKAGE_MANAGER=pnpm" >> $GITHUB_ENV
          else
            echo "Using yarn"
            echo "PACKAGE_MANAGER=yarn" >> $GITHUB_ENV
          fi

      - if: ${{ env.PACKAGE_MANAGER == 'pnpm' }}
        name: 'Install pnpm'
        uses: pnpm/action-setup@129abb77bf5884e578fcaf1f37628e41622cc371
        with:
          version: 9

      - name: 'Install latest node version'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.nodeVersion }}
          cache: ${{ env.PACKAGE_MANAGER }}

      - name: 'Download dist folder artifact'
        if: ${{ inputs.distFolderNeedForRelease }}
        uses: actions/download-artifact@v4
        with:
          name: dist-folder
          path: ${{ inputs.releaseWorkingDirectory != '' && format('{0}/dist', inputs.releaseWorkingDirectory) || './dist' }}

      - name: 'Install Dependencies and prepare packages'
        run: $PACKAGE_MANAGER install ${{ inputs.yarnFlags }}
        env:
          CI: true

      - name: 'Run after install commands'
        run: ${{ inputs.runAfterInstall }}
        if: ${{ inputs.runAfterInstall != '' }}

      - name: 'Get token for the GitHub App'
        if: ${{ inputs.appId != '' }}
        uses: actions/create-github-app-token@f2acddfb5195534d487896a656232b016a682f3c
        id: app-token
        with:
          app-id: ${{ inputs.appId }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: 'Semantic Release'
        uses: cycjimmy/semantic-release-action@61680d0e9b02ff86f5648ade99e01be17f0260a4
        with:
          working_directory: ${{ inputs.releaseWorkingDirectory }}
          extra_plugins: |
            @semantic-release/exec@6.0.3
            conventional-changelog-conventionalcommits@5.0.0
        env:
          GITHUB_TOKEN: ${{ inputs.appId != '' && steps.app-token.outputs.token || secrets.GH_RELEASE_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
          HUSKY: 0
