name: 'Release TypeScript project'
on:
  workflow_call:
    inputs:
      nodeVersion:
        description: 'Node version to use'
        required: false
        type: string
        default: 'lts/*'
      runAfterInstall:
        type: string
        required: false
        description: Commands to run after installing dependencies.
      distFolderNeedForRelease:
        type: boolean
        required: false
        description: Flag that we need `dist` folder to start release process
    secrets:
      GH_RELEASE_TOKEN:
        required: true
      NPM_AUTH_TOKEN:
        required: false

jobs:
  build-and-check:
    name: 'Build project and run CI checks'
    uses: ./.github/workflows/build-typescript-project.yml
    with:
      runAfterInstall: ${{ inputs.runAfterInstall }}
      nodeVersion: ${{ inputs.nodeVersion }}
      artifactName: ${{ inputs.distFolderNeedForRelease && 'dist-folder' || '' }}
      artifactPath: ./dist

  release:
    name: 'Release'
    needs: build-and-check
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: 'Determine package manager'
        run: |
          if [[ -f "pnpm-lock.yaml" ]]; then
            echo "Using pnpm"
            echo "PACKAGE_MANAGER=pnpm" >> $GITHUB_ENV
          else
            echo "Using yarn"
            echo "PACKAGE_MANAGER=yarn" >> $GITHUB_ENV
          fi

      - if: ${{ env.PACKAGE_MANAGER == 'pnpm' }}
        name: 'Install pnpm'
        uses: pnpm/action-setup@ebcfd6995dade4b0104ac774445cef8b3b4635b0
        with:
          version: 8

      - name: 'Install latest node version'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.nodeVersion }}
          cache: ${{ env.PACKAGE_MANAGER }}

      - name: 'Download dist folder artifact'
        if: ${{ inputs.distFolderNeedForRelease }}
        uses: actions/download-artifact@v3
        with:
          name: dist-folder
          path: ./dist

      - name: 'Install Dependencies and prepare packages'
        run: $PACKAGE_MANAGER install ${{ inputs.yarnFlags }}
        env:
          CI: true

      - name: 'Run after install commands'
        run: ${{ inputs.runAfterInstall }}
        if: ${{ inputs.runAfterInstall != '' }}

      - name: 'Semantic Release'
        uses: cycjimmy/semantic-release-action@91ab76a4a393a8d0c4739e9aea1818b56bc953ea
        with:
          extra_plugins: |
            @semantic-release/exec@6.0.3
            conventional-changelog-conventionalcommits@5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
          HUSKY: 0

